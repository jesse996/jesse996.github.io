<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jesse&#39;s Blog</title>
    <link>https://jesse996.github.io/post/</link>
    <description>Recent content in Posts on Jesse&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Aug 2020 22:48:24 +0800</lastBuildDate>
    
	<atom:link href="https://jesse996.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>背包问题</title>
      <link>https://jesse996.github.io/post/first/</link>
      <pubDate>Mon, 10 Aug 2020 22:48:24 +0800</pubDate>
      
      <guid>https://jesse996.github.io/post/first/</guid>
      <description>0-1 背包  有 N 件物品和一个容量为 V 的背包。放入第 i 件物品耗费的费用是 cost[i]， 价值是 value[i]。求解将哪些物品装入背包可使价值总和最大
 //初始化 let v = 2;//背包体积 let n = 4;//物品个数,必须等于cost和value的长度 let cost = vec![1, 2, 3, 4];//物品花费 let value = vec![1, 3, 5, 7];//物品价值 let mut f = vec![0; v + 1]; // 0 &amp;lt;= i &amp;lt; n for i in 0..n { zoro_one_pack(&amp;amp;mut f, cost[i], value[i], v); } //最后价值总和最大的值就是f[v] fn zoro_one_pack(f: &amp;amp;mut Vec&amp;lt;usize&amp;gt;, cost: usize, value: usize, v: usize) { for j in (cost.</description>
    </item>
    
  </channel>
</rss>